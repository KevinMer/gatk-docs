{
  "summary": "A generic engine for comparing tree-structured objects",
  "parallel": [],
  "activeregion": {},
  "partitiontype": "LOCUS",
  "walkertype": "LocusWalker",
  "arguments": [
    {
      "summary": "If provided, we will compute the minimum pairwise differences to summary, which can be extremely expensive",
      "name": "--doPairwise",
      "synonyms": "-doPairwise",
      "type": "boolean",
      "required": "no",
      "fulltext": "",
      "defaultValue": "false",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_flag",
      "options": []
    },
    {
      "summary": "Number of iterations to perform, should be 1 unless you are doing memory testing",
      "name": "--iterations",
      "synonyms": "NA",
      "type": "int",
      "required": "no",
      "fulltext": "",
      "defaultValue": "1",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "Master file: expected results",
      "name": "--master",
      "synonyms": "-m",
      "type": "File",
      "required": "yes",
      "fulltext": "The master file against which we will compare test.  This is one of the two required\n files to do the comparison.  Conceptually master is the original file contained the expected\n results, but this doesn\u0027t currently have an impact on the calculations, but might in the future.",
      "defaultValue": "NA",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "required_in",
      "options": []
    },
    {
      "summary": "Max. number of diffs occuring exactly once in the file to process",
      "name": "--maxCount1Diffs",
      "synonyms": "-M1",
      "type": "int",
      "required": "no",
      "fulltext": "The maximum number of singleton (occurs exactly once between the two files) to display when writing out\n the summary.  Only applies if maxDiffs hasn\u0027t been exceeded.  For example, if maxDiffs is 10 and maxCount1Diffs\n is 2 and there are 20 diffs with count \u003e 1, then only 10 are shown, all of which have count above 1.",
      "defaultValue": "0",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "Max. number of diffs to process",
      "name": "--maxDiffs",
      "synonyms": "-M",
      "type": "int",
      "required": "no",
      "fulltext": "The max number of differences to display when summarizing.  For example, if there are 10M differences, but\n maxDiffs is 10, then the comparison aborts after first ten summarized differences are shown.  Note that\n the system shows differences sorted by frequency, so these 10 would be the most common between the two files.\n A value of 0 means show all possible differences.",
      "defaultValue": "0",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "Max. number of objects to read from the files.  -1 [default] means unlimited",
      "name": "--maxObjectsToRead",
      "synonyms": "-motr",
      "type": "int",
      "required": "no",
      "fulltext": "The engine will read at most this number of objects from each of master and test files.  This reduces\n the memory requirements for DiffObjects but does limit you to comparing at most this number of objects",
      "defaultValue": "-1",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "Max. number of differences to include in the summary.  -1 [default] means unlimited",
      "name": "--maxRawDiffsToSummarize",
      "synonyms": "-maxRawDiffsToSummarize",
      "type": "int",
      "required": "no",
      "fulltext": "",
      "defaultValue": "-1",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "Min number of observations for a records to display",
      "name": "--minCountForDiff",
      "synonyms": "-MCFD",
      "type": "int",
      "required": "no",
      "fulltext": "Only differences that occur more than minCountForDiff are displayed.  For example, if minCountForDiff is 10, then\n a difference must occur at least 10 times between the two files to be shown.",
      "defaultValue": "1",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "File to which results should be written",
      "name": "--out",
      "synonyms": "-o",
      "type": "PrintStream",
      "required": "no",
      "fulltext": "Writes out a file of the DiffEngine format:\n\n     See http://www.broadinstitute.org/gatk/guide/article?id\u003d1299 for details.",
      "defaultValue": "stdout",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_out",
      "options": []
    },
    {
      "summary": "Should we enumerate all differences between the files?",
      "name": "--showItemizedDifferences",
      "synonyms": "-SID",
      "type": "boolean",
      "required": "no",
      "fulltext": "If provided, the system will write out the summarized, individual differences.  May lead to enormous outputs,\n depending on how many differences are found.  Note these are not sorted in any way, so if you have 10M\n common differences in the files, you will see 10M records, whereas the final summarize will just list the\n difference and its count of 10M.",
      "defaultValue": "false",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_flag",
      "options": []
    },
    {
      "summary": "Test file: new results to compare to the master file",
      "name": "--test",
      "synonyms": "-t",
      "type": "File",
      "required": "yes",
      "fulltext": "The test file against which we will compare to the master.  This is one of the two required\n files to do the comparison.  Conceptually test is the derived file from master, but this\n doesn\u0027t currently have an impact on the calculations, but might in the future.",
      "defaultValue": "NA",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "required_in",
      "options": []
    }
  ],
  "refwindow": {},
  "description": "\n\n \u003cp\u003e\n      This tool compares two record-oriented files, itemizing specific difference between equivalent\n      records in the two files.  Reports both itemized and summarized differences.\n \u003c/p\u003e\n\n \u003ch3\u003eWhat are the summarized differences and the DiffObjectsWalker?\u003c/h3\u003e\n\n \u003cp\u003e\n     The GATK contains a summarizing difference engine that compares hierarchical data structures to emit:\n      \u003cul\u003e\n          \u003cli\u003eA list of specific differences between the two data structures.  This is similar to saying the value in field A in record 1 in file F differences from the value in field A in record 1 in file G.\u003c/li\u003e\n          \u003cli\u003eA summarized list of differences ordered by frequency of the difference.  This output is similar to saying field A in 50 records in files F and G differed.\u003c/li\u003e\n      \u003c/ul\u003e\n \u003c/p\u003e\n\n \u003cp\u003e\n      The GATK contains a private walker DiffObjects that allows you access to the DiffEngine capabilities on the command line.  Simply provide the walker with the master and test files and it will emit summarized differences for you.\n \u003c/p\u003e\n\n \u003ch3\u003eWhy?\u003c/h3\u003e\n\n \u003cp\u003e\n      The reason for this system is that it allows you to compare two structured files -- such as BAMs and VCFs -- for common differences among them.  This is primarily useful in regression testing or optimization, where you want to ensure that the differences are those that you expect and not any others.\n \u003c/p\u003e\n\n \u003ch3\u003eInput\u003c/h3\u003e\n \u003cp\u003e\n      The DiffObjectsWalker works with BAM or VCF files.\n \u003c/p\u003e\n\n \u003ch3\u003eOutput\u003c/h3\u003e\n \u003cp\u003e\n      The DiffEngine system compares to two hierarchical data structures for specific differences in the values of named\n      nodes.  Suppose I have two trees:\n \u003cpre\u003e\n     Tree1\u003d(A\u003d1 B\u003d(C\u003d2 D\u003d3))\n     Tree2\u003d(A\u003d1 B\u003d(C\u003d3 D\u003d3 E\u003d4))\n     Tree3\u003d(A\u003d1 B\u003d(C\u003d4 D\u003d3 E\u003d4))\n \u003c/pre\u003e\n \u003cp\u003e\n     where every node in the tree is named, or is a raw value (here all leaf values are integers).  The DiffEngine\n      traverses these data structures by name, identifies equivalent nodes by fully qualified names\n      (Tree1.A is distinct from Tree2.A, and determines where their values are equal (Tree1.A\u003d1, Tree2.A\u003d1, so they are).\n      These itemized differences are listed as:\n \u003cpre\u003e\n     Tree1.B.C\u003d2 !\u003d Tree2.B.C\u003d3\n     Tree1.B.C\u003d2 !\u003d Tree3.B.C\u003d4\n     Tree2.B.C\u003d3 !\u003d Tree3.B.C\u003d4\n     Tree1.B.E\u003dMISSING !\u003d Tree2.B.E\u003d4\n \u003c/pre\u003e\n\n \u003cp\u003e\n      This conceptually very similar to the output of the unix command line tool diff.  What\u0027s nice about DiffEngine though\n      is that it computes similarity among the itemized differences and displays the count of differences names\n      in the system.  In the above example, the field C is not equal three times, while the missing E in Tree1 occurs\n      only once.  So the summary is:\n\n \u003cpre\u003e\n     *.B.C : 3\n     *.B.E : 1\n \u003c/pre\u003e\n\n \u003cp\u003e\n      where the * operator indicates that any named field matches.  This output is sorted by counts, and provides an\n      immediate picture of the commonly occurring differences among the files.\n \u003cp\u003e\n      Below is a detailed example of two VCF fields that differ because of a bug in the AC, AF, and AN counting routines,\n      detected by the integrationtest integration (more below).  You can see that in the although there are many specific\n      instances of these differences between the two files, the summarized differences provide an immediate picture that\n      the AC, AF, and AN fields are the major causes of the differences.\n \u003cp\u003e\n\n \u003cpre\u003e\n [testng] path                                                             count\n [testng] *.*.*.AC                                                         6\n [testng] *.*.*.AF                                                         6\n [testng] *.*.*.AN                                                         6\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000000.AC  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000000.AF  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000000.AN  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000117.AC  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000117.AF  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000117.AN  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000211.AC  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000211.AF  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000211.AN  1\n [testng] 64b991fd3850f83614518f7d71f0532f.integrationtest.20:10000598.AC  1\n \u003c/pre\u003e\n\n \u003ch3\u003eCaveat\u003c/h3\u003e\n \u003cp\u003eBecause this is a walker, it requires that you pass a reference file. However the reference is not actually used, so it does not matter what you pass as reference.\u003c/p\u003e",
  "name": "DiffObjects",
  "annotinfo": "",
  "readfilters": [
    {
      "filename": "org_broadinstitute_gatk_engine_filters_MalformedReadFilter.html",
      "name": "MalformedReadFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_BadCigarFilter.html",
      "name": "BadCigarFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_UnmappedReadFilter.html",
      "name": "UnmappedReadFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_NotPrimaryAlignmentFilter.html",
      "name": "NotPrimaryAlignmentFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_FailsVendorQualityCheckFilter.html",
      "name": "FailsVendorQualityCheckFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_DuplicateReadFilter.html",
      "name": "DuplicateReadFilter"
    }
  ],
  "downsampling": {},
  "group": "Diagnostics and Quality Control Tools",
  "annotfield": ""
}