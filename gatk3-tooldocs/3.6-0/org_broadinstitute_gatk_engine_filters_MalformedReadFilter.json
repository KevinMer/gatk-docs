{
  "summary": "Filter out malformed reads",
  "parallel": [],
  "activeregion": {},
  "partitiontype": "",
  "walkertype": "",
  "arguments": [
    {
      "summary": "Filter out reads with no stored bases (i.e. \u0027*\u0027 where the sequence should be), instead of failing with an error",
      "name": "--filter_bases_not_stored",
      "synonyms": "-filterNoBases",
      "type": "boolean",
      "required": "no",
      "fulltext": "",
      "defaultValue": "false",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_flag",
      "options": []
    },
    {
      "summary": "Filter out reads with mismatching numbers of bases and base qualities, instead of failing with an error",
      "name": "--filter_mismatching_base_and_quals",
      "synonyms": "-filterMBQ",
      "type": "boolean",
      "required": "no",
      "fulltext": "",
      "defaultValue": "false",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_flag",
      "options": []
    },
    {
      "summary": "Filter out reads with CIGAR containing the N operator, instead of failing with an error",
      "name": "--filter_reads_with_N_cigar",
      "synonyms": "-filterRNC",
      "type": "boolean",
      "required": "no",
      "fulltext": "",
      "defaultValue": "false",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_flag",
      "options": []
    }
  ],
  "refwindow": {},
  "description": "\n\n \u003cp\u003eThis filter is applied automatically by all GATK tools in order to protect them from crashing on reads that are\n malformed. There are a few types of malformation (such as the absence of sequence bases) that are not filtered out \n by default and can cause errors, but these cases can be preempted by setting flags that cause the problem reads to \n also be filtered.\u003c/p\u003e\n \n \u003ch4\u003eCriteria used by default\u003c/h4\u003e\n \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eInvalid Alignment Start:\u003c/b\u003e Read alignment start is inconsistent with the read unmapped flag; either read is not flagged as \u0027unmapped\u0027, but alignment start is NO_ALIGNMENT_START, or read is not flagged as \u0027unmapped\u0027, but alignment start is -1.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eInvalid Alignment End:\u003c/b\u003e Read aligns to negative number of bases in the reference.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eAlignment Disagrees With Header:\u003c/b\u003e Read is aligned to nonexistent contig or read is aligned to a point after the end of the contig.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eMissing or Undefined Read Group:\u003c/b\u003e Either the RG tag is missing, it is not defined in the header, or required elements such as RGID are missing.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eCigar Disagrees With Alignment:\u003c/b\u003e Read has a valid alignment start, but the CIGAR string is empty.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eCIGAR Is Not Supported:\u003c/b\u003e Read CIGAR contains operators that are not supported (N which is treated separately).\u003c/li\u003e\n \u003c/ul\u003e\n \n \u003ch4\u003eOptional criteria\u003c/h4\u003e\n \u003cul\u003e\n      \u003cli\u003e\u003cb\u003eMismatching Bases And Quals:\u003c/b\u003e Read does not have the same number of bases and base qualities.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eBases Not Stored:\u003c/b\u003e Read with no stored bases, has \u0027*\u0027 instead in the SEQ field.\u003c/li\u003e\n      \u003cli\u003e\u003cb\u003eCIGAR With N Operator:\u003c/b\u003e Read CIGAR contains N operator (typical of RNA_seq data).\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003ch3\u003eUsage example\u003c/h3\u003e\n\n \u003ch4\u003eSet the malformed read filter to also filter out reads that have no stored sequence bases\u003c/h4\u003e\n \u003cpre\u003e\n     java -jar GenomeAnalysisTk.jar \\\n         -T ToolName \\\n         -R reference.fasta \\\n         -I input.bam \\\n         -o output.file \\\n         -filterNoBases\n \u003c/pre\u003e\n\n \u003cp\u003eNote that the MalformedRead filter itself does not need to be specified in the command line because it is set\n automatically.\u003c/p\u003e",
  "name": "MalformedReadFilter",
  "annotinfo": "",
  "readfilters": [],
  "downsampling": {},
  "group": "Read Filters",
  "annotfield": ""
}