{
  "summary": "Create a subset of a FASTA reference sequence",
  "parallel": [],
  "activeregion": {},
  "partitiontype": "LOCUS",
  "walkertype": "LocusWalker",
  "arguments": [
    {
      "summary": "Maximum length of sequence to write per line",
      "name": "--lineWidth",
      "synonyms": "-lw",
      "type": "int",
      "required": "no",
      "fulltext": "",
      "defaultValue": "60",
      "minValue": "-Infinity",
      "maxValue": "Infinity",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_param",
      "options": []
    },
    {
      "summary": "An output file created by the walker.  Will overwrite contents if file exists",
      "name": "--out",
      "synonyms": "-o",
      "type": "PrintStream",
      "required": "no",
      "fulltext": "",
      "defaultValue": "NA",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_out",
      "options": []
    },
    {
      "summary": "Print sequences with no FASTA header lines, one line per interval (i.e. lineWidth \u003d infinity)",
      "name": "--rawOnelineSeq",
      "synonyms": "-raw",
      "type": "boolean",
      "required": "no",
      "fulltext": "Please note that when using this argument adjacent intervals will automatically be merged.",
      "defaultValue": "NA",
      "minValue": "NA",
      "maxValue": "NA",
      "minRecValue": "NA",
      "maxRecValue": "NA",
      "rodTypes": "NA",
      "kind": "optional_flag",
      "options": []
    }
  ],
  "refwindow": {},
  "description": "\n\n \u003cp\u003eThis tool creates a new reference in FASTA format consisting of only those positions or intervals\n provided in the input data set. The output format can be partially controlled using the provided command-line\n arguments. Specify intervals with the usual -L argument to output only the reference bases within your intervals.\n Overlapping intervals are automatically merged; reference bases for each disjoint interval will be output as a\n separate fasta sequence (named numerically in order).\u003c/p\u003e\n\n \u003ch3\u003eInput\u003c/h3\u003e\n \u003cp\u003e\n The reference and requested intervals.\n \u003c/p\u003e\n\n \u003ch3\u003eOutput\u003c/h3\u003e\n \u003cp\u003e\n A fasta file representing the requested intervals. Each interval has a description line starting with a greater-than (\"\u003e\") symbol followed by sequence data.\n The description begins with the contig name followed by the beginning position on the contig.\n \u003cpre\u003e\n For example, the fasta file for contig 1 and intervals 1:3-1:4 and 1:6-1:9\n \u003e1 1:3\n AT\n \u003e1 1:6\n GGGG\n \u003c/pre\u003e\n \u003c/p\u003e\n\n \u003ch3\u003eUsage example\u003c/h3\u003e\n \u003cpre\u003e\n java -jar GenomeAnalysisTK.jar \\\n   -T FastaReferenceMaker \\\n   -R reference.fasta \\\n   -o output.fasta \\\n   -L input.intervals\n \u003c/pre\u003e",
  "name": "FastaReferenceMaker",
  "annotinfo": "",
  "readfilters": [
    {
      "filename": "org_broadinstitute_gatk_engine_filters_MalformedReadFilter.html",
      "name": "MalformedReadFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_BadCigarFilter.html",
      "name": "BadCigarFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_UnmappedReadFilter.html",
      "name": "UnmappedReadFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_NotPrimaryAlignmentFilter.html",
      "name": "NotPrimaryAlignmentFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_FailsVendorQualityCheckFilter.html",
      "name": "FailsVendorQualityCheckFilter"
    },
    {
      "filename": "org_broadinstitute_gatk_engine_filters_DuplicateReadFilter.html",
      "name": "DuplicateReadFilter"
    }
  ],
  "downsampling": {
    "by": "BY_SAMPLE",
    "to_cov": 1000
  },
  "group": "Reference Utilities",
  "annotfield": ""
}